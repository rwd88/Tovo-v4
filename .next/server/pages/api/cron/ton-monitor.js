"use strict";(()=>{var a={};a.id=9748,a.ids=[9748],a.modules={1853:(a,b,c)=>{c.d(b,{z:()=>e});var d=c(6330);let e=global.prisma||new d.PrismaClient({log:["warn","error"]});e.$use(async(a,b)=>{let c=Date.now(),d=await b(a),e=Date.now();return console.log(`🔍 prisma: ${a.model}.${a.action} took ${e-c}ms`),d})},1918:(a,b,c)=>{c.r(b),c.d(b,{config:()=>o,default:()=>n,handler:()=>q});var d={};c.r(d),c.d(d,{default:()=>k});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(4038);let j=!1;async function k(a,b){if(j)return b.status(200).json({success:!0,message:"Already running"});j=!0;try{return await (0,i.A)(),b.status(200).json({success:!0})}catch(a){return console.error("TON monitor error:",a),b.status(500).json({success:!1,error:a.message})}finally{j=!1}}var l=c(8112),m=c(8766);let n=(0,h.M)(d,"default"),o=(0,h.M)(d,"config"),p=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/cron/ton-monitor",pathname:"/api/cron/ton-monitor",bundlePath:"",filename:""},userland:d,distDir:".next",projectDir:""});async function q(a,b,c){let d=await p.prepare(a,b,{srcPage:"/api/cron/ton-monitor"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h}=d;try{let c=a.method||"GET",d=(0,l.getTracer)(),e=d.getActiveScopeSpan(),i=p.instrumentationOnRequestError.bind(p),j=async e=>p.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:void 0,multiZoneDraftMode:!0,trustHostHeader:void 0,previewProps:h.preview,propagateError:!1,dev:p.isDev,page:"/api/cron/ton-monitor",projectDir:"",onError:(...b)=>i(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==m.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await j(e):await d.withPropagatedContext(a.headers,()=>d.trace(m.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:l.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},j))}catch(a){if(p.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}},2625:a=>{a.exports=require("tonweb")},4038:(a,b,c)=>{c.d(b,{A:()=>o});var d=c(2625),e=c.n(d),f=c(6330),g=c(6057);a=c.hmd(a);let h=new f.PrismaClient,i=process.env.TON_RPC_URL,j=parseInt(process.env.TON_CHAIN_ID||"",10),k=parseInt(process.env.POLL_INTERVAL_MS||"15000",10);if(!i)throw Error("Missing TON_RPC_URL in environment");if(!j)throw Error("Missing TON_CHAIN_ID in environment");let l=new(e())(new(e()).HttpProvider(i)),m={},n=BigInt(0);async function o(){console.log("☑️ TON monitor starting—polling every",k,"ms");let a=await h.depositAddress.findMany({where:{chainId:j},select:{address:!0,lastBalance:!0}});for(let{address:b,lastBalance:c}of a)m[b]=BigInt(c);setInterval(async()=>{for(let{address:b}of a)try{let a=await l.getBalance(b),c=BigInt(a),d=m[b]??n;if(c>d){let a=(c-d).toString();console.log(`🔔 TON deposit ${a} detected at ${b}`),await (0,g.c)({chainId:j,address:b,amount:a,txHash:"",blockNumber:0}),await h.depositAddress.update({where:{address:b},data:{lastBalance:c.toString()}}),m[b]=c}}catch(a){console.error("❌ TON error for",b,a)}},k)}c.c[c.s]===a&&o().catch(a=>{console.error(a),process.exit(1)})},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6057:(a,b,c)=>{c.d(b,{c:()=>f,v:()=>e});var d=c(1853);async function e(a){return d.z.depositAddress.findMany({where:{chainId:a},select:{address:!0,lastBalance:!0}})}async function f(a){let b=await d.z.deposit.create({data:{chainId:a.chainId,address:a.address,amount:a.amount,txHash:a.txHash,blockNumber:a.blockNumber}}),c=await d.z.depositAddress.findUnique({where:{address:a.address},select:{lastBalance:!0}});if(c){let b=(BigInt(c.lastBalance)+BigInt(a.amount)).toString();await d.z.depositAddress.update({where:{address:a.address},data:{lastBalance:b}})}return b}},6330:a=>{a.exports=require("@prisma/client")}};var b=require("../../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[7169],()=>b(b.s=1918));module.exports=c})();