"use strict";(()=>{var a={};a.id=6717,a.ids=[6717],a.modules={1853:(a,b,c)=>{c.d(b,{z:()=>e});var d=c(6330);let e=global.prisma||new d.PrismaClient({log:["warn","error"]});e.$use(async(a,b)=>{let c=Date.now(),d=await b(a),e=Date.now();return console.log(`🔍 prisma: ${a.model}.${a.action} took ${e-c}ms`),d})},3328:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{config:()=>o,default:()=>n,handler:()=>m});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(8371),j=c(8112),k=c(8766),l=a([i]);i=(l.then?(await l)():l)[0];let n=(0,h.M)(i,"default"),o=(0,h.M)(i,"config"),p=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/deposits/evm",pathname:"/api/deposits/evm",bundlePath:"",filename:""},userland:i,distDir:".next",projectDir:""});async function m(a,b,c){let d=await p.prepare(a,b,{srcPage:"/api/deposits/evm"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h}=d;try{let c=a.method||"GET",d=(0,j.getTracer)(),e=d.getActiveScopeSpan(),i=p.instrumentationOnRequestError.bind(p),l=async e=>p.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:void 0,multiZoneDraftMode:!0,trustHostHeader:void 0,previewProps:h.preview,propagateError:!1,dev:p.isDev,page:"/api/deposits/evm",projectDir:"",onError:(...b)=>i(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==k.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await l(e):await d.withPropagatedContext(a.headers,()=>d.trace(k.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:j.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},l))}catch(a){if(p.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}d()}catch(a){d(a)}})},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6330:a=>{a.exports=require("@prisma/client")},8371:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{default:()=>h});var e=c(9527),f=c(1853),g=a([e]);e=(g.then?(await g)():g)[0];let i=parseInt(process.env.EVM_CHAIN_ID||"",10);if(!i)throw Error("Missing or invalid EVM_CHAIN_ID in env");let j=new e.JsonRpcProvider(process.env.ETH_RPC);async function h(a,b){if("GET"!==a.method)return b.setHeader("Allow",["GET"]),b.status(405).end(`Method ${a.method} Not Allowed`);try{let a=await f.z.onChainDeposit.findMany({where:{chainId:i,status:"pending"},select:{id:!0,txHash:!0}}),c=[];for(let b of a){let a=await j.getTransactionReceipt(b.txHash);a?.blockNumber!=null&&await j.getBlockNumber()-a.blockNumber>12&&(await f.z.onChainDeposit.update({where:{id:b.id},data:{status:"approved"}}),c.push(b.id))}return b.status(200).json({success:!0,checked:a.length,approved:c.length,ids:c})}catch(a){return console.error("EVM monitor error:",a),b.status(500).json({error:"Unable to process EVM deposits"})}}d()}catch(a){d(a)}})},9527:a=>{a.exports=import("ethers")}};var b=require("../../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[7169],()=>b(b.s=3328));module.exports=c})();