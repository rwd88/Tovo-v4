generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id
  telegramId   String   @unique
  username     String?
  balance      Float    @default(0)
  createdAt    DateTime @default(now())
  solanaWallet String?
  bscWallet    String?
  trades       Trade[]

  @@map("users")
}

model Market {
  id           String    @id @default(cuid())
  externalId   String?   @unique(map: "Market_externalId_key")
  question     String
  description  String?
  eventTime    DateTime  @default(now())
  published    Boolean   @default(false)
  forecast     Float?
  outcome      String?
  poolYes      Float     @default(0)
  poolNo       Float     @default(0)
  status       String    @default("open")
  feeCollected Float     @default(0)  
  settledAt    DateTime? // ← add this line
  trades       Trade[]
  createdAt    DateTime  @default(now())
  expiresAt    DateTime? // ✅ Optional if needed
  notified     Boolean   @default(false)
  outcomes     Outcome[]

  @@map("markets")
}

model Outcome {
  id       String  @id @default(cuid())
  marketId String
  market   Market  @relation(fields: [marketId], references: [id])
  trades   Trade[] @relation("OutcomeTrades") // ← name the relation
  name     String
}

model Trade {
  id        String   @id @default(cuid())
  market    Market   @relation(fields: [marketId], references: [id])
  marketId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  outcome   Outcome? @relation("OutcomeTrades", fields: [outcomeId], references: [id])
  outcomeId String?
  type      String
  amount    Float
  fee       Float
  payout    Float
  shares    Float
  settled   Boolean  @default(false)
  won       Boolean? // ✅ ADD THIS LINE
  createdAt DateTime @default(now())

  @@index([marketId])
  @@index([userId])
  @@map("trades")
}

model Deposit {
  id          Int      @id @default(autoincrement())
  chainId     Int
  address     String
  amount      String
  txHash      String
  blockNumber Int
  createdAt   DateTime @default(now())

  @@map("deposits")
}

model Withdrawal {
  id        String   @id @default(cuid())
  userId    String
  chain     String
  amount    Float
  nonce     String   @unique
  expiresAt DateTime
  status    String
  txHash    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("withdrawals")
}

model DepositAddress {
  id              Int              @id @default(autoincrement())
  chainId         Int
  address         String           @unique
  lastBalance     String
  onChainDeposits OnChainDeposit[] @relation("AddressDeposits")

  @@map("deposit_addresses")
}

model OnChainDeposit {
  id             Int             @id @default(autoincrement())
  chainId        Int
  address        String
  amount         String
  txHash         String          @unique
  blockNumber    Int
  status         String
  createdAt      DateTime        @default(now())
  depositAddress DepositAddress? @relation("AddressDeposits", fields: [address], references: [address])

  @@map("onchain_deposits")
}

model Subscriber {
  id        String @id @default(cuid())
  chatId    String @unique
  subscribed Boolean @default(true)
  createdAt DateTime @default(now())
}